:: Brainfuck interpreter

:: bf code
^1 <= "++++++++++++[>++>++++++++>+++++++++>+++++++++>+++++++++>+++++++>++>+++++++++>+++++++++>+++++++++>++++++++>++++++<<<<<<<<<<<<-]>+++++++++>++++>>++++++>+++>+++>++++++++>+++>>>+++++>[.[-]<]"

:: code pointer
#1 <=

:: bf field
^3 <=

:: allocation
#4 <= 256
#5 <=
  ^3 => #5 <= 0
  #5 <= #5 + 1
  #4 <= #4 - 1
  #0 <= #0 - (#4 / #4) * 4

:: bf pointer
#3 <=

:: main loop
!1

:: allowed chars
^2 <= "+-<>[].,"

:: set current cell %256
#4 <= ^3 => #3
^3 => #3 <= #4 - #4 / 256 * 256

:: current char
#4 <= ^1 => #1

:: get position of allowed
#2 <=
  !12
  #5 <= ^2 => #2
  :: if already zero, then break
    #0 <= #0 + (1 - #5 / #5) * 4
  :: if same char, then break
    #6 <= #5 - #4
    #0 <= #0 + (1 - #6 / #6) * 2
  :: else increase, branch back
  #2 <= #2 + 1
  #0 <= !12

:: perform branch to function
#0 <= !(#2 + 2)

:: increase code pointer, branch back to begin
!11
#1 <= #1 + 1
#0 <= !1

:: +
!2
^3 => #3 <= ^3 => #3 + 1
#0 <= !11

:: -
!3
^3 => #3 <= ^3 => #3 - 1
#0 <= !11

:: <
!4
#3 <= #3 - 1
#0 <= !11

:: >
!5
#3 <= #3 + 1
#0 <= !11

:: [
:: if 0
!6
#4 <= ^3 => #3
#0 <= #0 + (#4 / #4) * 9
  :: brackets
  ^2 <= "[]"
  :: bracket counter
  #6 <=
    !61
    :: brackets increase
    #5 <= ^2 => 0 - ^1 => #1
    #6 <= #6 + (1 - #5 / #5)
    #5 <= ^2 => 1 - ^1 => #1
    #6 <= #6 - (1 - #5 / #5)
    :: if zero, break
    #0 <= #0 + (1 - #6 / #6) * 2
    :: next code point
    #1 <= #1 + 1
    #0 <= !61
#0 <= !11

:: ]
:: if not 0
!7
#4 <= ^3 => #3
#0 <= #0 + (1 - #4 / #4) * 9
  :: brackets
  ^2 <= "[]"
  :: bracket counter
  #6 <=
    !71
    :: brackets increase
    #5 <= ^2 => 0 - ^1 => #1
    #6 <= #6 - (1 - #5 / #5)
    #5 <= ^2 => 1 - ^1 => #1
    #6 <= #6 + (1 - #5 / #5)
    :: if zero, break
    #0 <= #0 + (1 - #6 / #6) * 2
    :: next code point
    #1 <= #1 - 1
    #0 <= !71
#0 <= !11

:: .
!8
&1 <= ^3 => #3
#0 <= !11

:: ,
!9
^3 => #3 <= &0
#0 <= !11

!10
:: exit
